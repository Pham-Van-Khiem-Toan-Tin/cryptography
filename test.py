def gf_mult(a, b):
    """Nh√¢n trong GF(2^8) v·ªõi ƒëa th·ª©c b·∫•t kh·∫£ quy x^8 + x^4 + x^3 + x + 1 (0x11B)."""
    p = 0
    for _ in range(8):
        if b & 1:
            p ^= a
        hi_bit = a & 0x80
        a <<= 1
        if hi_bit:
            a ^= 0x1B
        a &= 0xFF
        b >>= 1
    return p

def mix_column(column):
    """Th·ª±c hi·ªán MixColumns tr√™n 1 c·ªôt (4 byte)."""
    mix_matrix = [
        [2, 3, 1, 1],
        [1, 2, 3, 1],
        [1, 1, 2, 3],
        [3, 1, 1, 2]
    ]
    result = []
    for row in mix_matrix:
        val = 0
        for i in range(4):
            val ^= gf_mult(row[i], column[i])
        result.append(val)
    return result

# üîç V√≠ d·ª•: 1 c·ªôt c·∫ßn MixColumns (gi√° tr·ªã m·∫´u t·ª´ FIPS-197)
state_after_shiftrows = [
    [1, 183, 117, 76],
    [195, 9, 159, 76],
    [143, 2, 64, 47],
    [159, 51, 33, 133]
]

# L·∫•y 1 c·ªôt c·ª• th·ªÉ, v√≠ d·ª• c·ªôt th·ª© 0 (index 0)
example_col = [state_after_shiftrows[r][0] for r in range(4)]  # = [1, 195, 143, 159]

# G·ªçi h√†m mix_column
result = mix_column(example_col)

# In k·∫øt qu·∫£
print("K·∫øt qu·∫£ sau MixColumns (hex):", [hex(b) for b in result])